#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\use_default_options true
\begin_modules
algorithm2e
changebars
figs-within-sections
tabs-within-sections
rsphrase
theorems-std
theorems-chap
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Times New Roman"
\font_sans "default" "Arial"
\font_typewriter "default" "Consolas"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing onehalf
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 3
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref page
\pdf_pdfusetitle true
\papersize letterpaper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\headheight 0.6in
\headsep 0.4in
\footskip 0.6in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Learning Outcomes and Program Mission
\end_layout

\begin_layout Standard
To develop the talent necessary to improve the cybersecurity posture of
 the heavy vehicle.
\end_layout

\begin_layout Section*
Program Objectives
\end_layout

\begin_layout Standard
The Taxonomy of Educational Objectives (Bloom's Taxonomy)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graphics/blooms_taxonomy.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bloom's Taxonomy from 
\begin_inset CommandInset href
LatexCommand href
name "Jessica Shabatura"
target "https://tips.uark.edu/using-blooms-taxonomy/"
literal "false"

\end_inset

.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Assessments and Exercises
\end_layout

\begin_layout Standard
Formative
\end_layout

\begin_layout Standard
Learning
\end_layout

\begin_layout Standard
Assessments are formative hands-on exercises where students 
\end_layout

\begin_layout Standard
Summative
\end_layout

\begin_layout Chapter
Computer Programming for Engineers
\end_layout

\begin_layout Standard
Computer programming is a large and daunting field that can be intimidating
 for first time programmers.
 It does not need to be.
 At its core, computer programming is providing a set of instructions to
 a computer.
 Each line of code contains one or more instructions.
 Sometimes instructions interfere with each other and cause errors.
 Imagine you are telling someone who has never seen a sandwich before how
 to make a peanut butter and jelly sandwich.
 The steps may be:
\end_layout

\begin_layout Enumerate
Get Bread, Peanut Butter, Jelly, Knife, and Plate.
\end_layout

\begin_layout Enumerate
Place plate.
\end_layout

\begin_layout Enumerate
Place two pieces of bread side by side on plate.
 Call them Slice A and Slice B.
\end_layout

\begin_layout Enumerate
Put peanut butter on knife.
\end_layout

\begin_layout Enumerate
Use knife to spread peanut butter on Slice A.
\end_layout

\begin_layout Enumerate
Clean knife.
\end_layout

\begin_layout Enumerate
Put jelly on knife.
\end_layout

\begin_layout Enumerate
Use knife to spread jelly on Slice B.
\end_layout

\begin_layout Enumerate
Combine Slice A with Slice B by placing Slice B on Slice A.
\end_layout

\begin_layout Enumerate
Eat Sandwich.
\end_layout

\begin_layout Enumerate
Clean Knife
\end_layout

\begin_layout Enumerate
Clean Plate
\end_layout

\begin_layout Standard
Provided no external changes, this set of instructions will always lead
 to a proper peanut butter and jelly sandwich.
 However, some people may argue about if you should use grape jelly or strawberr
y jelly, chunky or smooth peanut butter.
 Some people are adamant that you must put Jelly on Slice A, never peanut
 butter.
 Some argue that if you start with a loaf of bread instead of slices then
 you can get a better sandwich.
 These options represent the different ways that people program.
 There are many different sets of instructions that produce peanut butter
 and jelly sandwiches.
 Programming is very smiliar.
 There are many different ways to code a program that will lead to the same
 result.
 
\end_layout

\begin_layout Standard
However, there are ways which are more efficient than others, and there
 are ways to make code easier to understand.
 When writing code, it is important to write with a consistent programming
 style that allows others to understand your code.
 You may return to code later or need to provide it to others.
 If your code is messy and difficult to 
\end_layout

\begin_layout Section
Introduction to Computer Programming with Python
\end_layout

\begin_layout Chapter
Initial Heavy Vehicle Serial Protocols
\end_layout

\begin_layout Chapter
High speed communication with SAE J1939 and CAN Bus
\end_layout

\begin_layout Exercise
CAN Frame Decoding
\end_layout

\begin_layout Standard
Capture a CAN Frame using an oscilloscpope on a J1939 network and decode
 it according to SAE J1939.
\end_layout

\begin_layout Exercise
Read Live Engine RPM Challenge
\end_layout

\begin_layout Standard
Using a BeagleBone Black and a Truck Cape, connect to an engine contoller
 that is broadcasting non-zero engine RPM.
 Gather this data using candump.
 Interpret the raw CAN frames and extract information for Engine RPM, or
 J1939 SPN 190.
 Plot 20 seconds of changing RPM with matplotlib.
 Print the properly labeled plot to PDF and show it to your instructor.
 Objectives
\end_layout

\begin_layout Standard
Learn how to interface with Linux SocketCAN and can-utils Be able to look
 up a signal definition in the J1939 Digital Annex (spreadsheet) Use grep
 to search for specific strings from a candump Have a reliable CAN datalogger
 for use in future projects Plot data using matplotlib in Python.
\end_layout

\begin_layout Standard
Suggested Materials
\end_layout

\begin_layout Standard
This exercise can be run with any Linux device with CAN hardware.
 An example of a commercial product with these features is the DG Technologies'
 Beacon device.
 An example of a hand built project is the BeagleBone Black with a TU TruckCape.
 Resources
\end_layout

\begin_layout Standard
J1939DA Internet Access (you may want to share your PC's connection sharing)
 
\end_layout

\begin_layout Exercise
Man in the Middle
\end_layout

\begin_layout Standard
Build a man-in-the middle board and box that takes CAN signals into one
 can channel and sends them out on another.
 Start a diagnostics session with a PC and RP1210 device to perform maintenance.
 Create a forwarding system that inspects and forwards network traffic in
 both directions.
 Attempt to hijack a a diagnostic session and affect a parameter change
 started with the PC diagnostics software.
\end_layout

\begin_layout Standard
Using DDEC Reports, try to prevent resetting the CPC clock during a data
 extraction on a CPC.
\end_layout

\begin_layout Chapter
Princples of Cybersecurity
\end_layout

\begin_layout Section
Introduction to Cryptography
\end_layout

\begin_layout Section
Message Authentication
\end_layout

\begin_layout Section
Encryption on CAN
\end_layout

\begin_layout Chapter
Heavy Vehicle Digital Forensics
\end_layout

\begin_layout Chapter
\start_of_appendix
Data Sheet Snippets
\end_layout

\end_body
\end_document
