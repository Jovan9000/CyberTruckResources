#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
%Document Parent class


%Package Control
\usepackage[dvipsnames]{xcolor}
\definecolor{custom1}{RGB}{0,0,0}

%for images
\usepackage{float}%also for images

%Heading Setup
\title{CyTeX Learning Program Student Handbook}
\author{University of Tulsa}
\date{Revised: July 2019}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding utf8
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref section
\pdf_pdfusetitle false
\pdf_quoted_options "linkcolor=black,filecolor=yellow,urlcolor=cyan,"
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%PREAMBLE~~~~~~~~~~~~~~~~~~~~~~
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
filename "../CyTeX-Learning-Program-Student-Handbook/preamble.lyx"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Beginning of the Document
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{document}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics
	filename ../CyTeX-Learning-Program-Student-Handbook/CyTEx18.jpg
	width 100text%

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
CyTeX 2018 at Peterbilt Motors Co.
 Manufacturing
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "img_cover"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Cyber Challenges
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Welcome to the Industry
\end_layout

\begin_layout Subsection
Terminology: 'The Truck Dictionary'
\end_layout

\begin_layout Subsection
Companies and Organizations: 'The Players'
\end_layout

\begin_layout Subsection
Regulators: 
\end_layout

\begin_layout Section
Electronics and Programming
\end_layout

\begin_layout Subsection
Microcontrollers
\end_layout

\begin_layout Subsection
Electronic Control Units
\end_layout

\begin_layout Subsection
Arduino and Teensy
\end_layout

\begin_layout Subsubsection
Getting Started
\end_layout

\begin_layout Standard
World cup
\end_layout

\begin_layout Subsubsection
Intro to CAN with Arduino
\end_layout

\begin_layout Standard
World cup
\end_layout

\begin_layout Subsection
'Micro-computers'
\end_layout

\begin_layout Subsection
Python 3
\end_layout

\begin_layout Standard
An important tool in any hackers toolkit is the ability to interact with
 collected data.
 In this section, we will be using a programming language called Python
 to help with this.
\end_layout

\begin_layout Subsubsection
Background
\end_layout

\begin_layout Standard
Python is a general-purpose, versatile and popular programming language.
 Itâs great as a first language because it is concise and easy to read.
 It is also a good language to have in any programmerâs stack as it can
 be used for everything from web development to software development and
 data science applications.
\end_layout

\begin_layout Standard
This is different than what we have done to this point in Arduino.
 We will generally use the Arduino devices to directly interface with systems.
 These devices will then send data back to a computer or other device running
 a python script.
\end_layout

\begin_layout Subsubsection
Codecademy
\end_layout

\begin_layout Standard
We will begin by having you learn the basics of python.
 We will be using an external system to aid in this.
 Navigate over to 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://www.codecademy.com/learn/learn-python"
literal "false"

\end_inset

and create an account using your email and fill out any information they
 require.
 Please ensure that you do not pay for this service at this time.
 We will only need the services that the free version offers.
\end_layout

\begin_layout Standard
Please complete this course.
 Take notes throughout the course over functions that may be useful (importing
 and exporting files, searching through lists, data structures, etc.) Periodicall
y, there will be additional trial material to supplement your learning.
\end_layout

\begin_layout Subsubsection
Threading
\end_layout

\begin_layout Subsubsection
PySerial
\end_layout

\begin_layout Subsubsection
matplotlib
\end_layout

\begin_layout Subsection
Making GUIs with PyQt5
\end_layout

\begin_layout Subsection
C++
\end_layout

\begin_layout Subsubsection
Codecademy
\end_layout

\begin_layout Section
Network Communications
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
Serial, USB, Ethernet, SPI, Wifi 
\end_layout

\begin_layout Subsection
Vehicle Networking Protocols
\end_layout

\begin_layout Standard
CAN, LIN, I
\begin_inset Formula $^{2}$
\end_inset

C, J1708 and J1587, and J1939
\end_layout

\begin_layout Section
Heavy Duty Truck Bus Protocols
\end_layout

\begin_layout Subsection
CAN Basics
\end_layout

\begin_layout Standard
A short overview of CAN is provided 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "run:SocketCANDocumentation(Linux Kernel).txt"
literal "false"

\end_inset

.
 If you attend the SAE CyberAuto Challenge you will be provided with more
 resources to learn about CAN.
\end_layout

\begin_layout Subsection
Introduction to SAE J1939
\end_layout

\begin_layout Subsection
Introduction to SAE J1708/1587
\end_layout

\begin_layout Standard
SAE J1708 and J1587 are the legacy network protocols for heavy vehicles.
 Together they provide detailed specifications for the electronics, hardware,
 message structuring, decoding and more.
 Namely, J1708 deals with the physical layer (the wiring), and J1587 deals
 with the the message layer or data format.
\end_layout

\begin_layout Standard
Often times engineers will refer to the two as simply 
\begin_inset Quotes eld
\end_inset

J1708
\begin_inset Quotes erd
\end_inset

 but it is important to remember that they are usually referring to both.
 After its release in the '90s, the standards were revised intermittently
 and were widely adopted despite their issues.
 Most notably, the J1708 network speed of 9600 bits/second limited the amount
 of data and network capabilities that could be included in a vehicle.
\end_layout

\begin_layout Standard
Today, J1708/1587 is now 
\begin_inset Quotes eld
\end_inset

stabilized
\begin_inset Quotes erd
\end_inset

 (no more future updates) and has been mostly supplanted by the newer J1939
 protocol.
 However, it is not uncommon to run into the legacy protocol when working
 on older trucks and trailers.
 Some OEMs are still designing the older protocol out of their vehicles
 as well.
 Thus, it is important to be aware of J1708/1587.
 Plus, if you learn to send and decode J1587 messages, learning the newer
 protocols is much easier!
\end_layout

\begin_layout Standard
For more info click 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://www.omnitracs.com/blog/get-bus-j1708-and-j1939-vehicle-bus-standards"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
J1708 - Physical Layer
\end_layout

\begin_layout Standard
As stated earlier, SAE J1708 describes the physical layer of legacy truck
 networks.
 
\end_layout

\begin_layout Subsubsection
J1587 - Application Layer
\end_layout

\begin_layout Subsection
Introduction to PLC4trucks/J2497
\end_layout

\begin_layout Standard
So far we have only discussed the communications on the truck network.
 But what if we also want data from trailer? The linkage between the tractor
 and trailer is poer 
\end_layout

\begin_layout Subsection
Introduction to TMC RP1210
\end_layout

\begin_layout Section
The UNIX/Linux Terminal
\end_layout

\begin_layout Subsection
Learn the Command Line
\end_layout

\begin_layout Standard
Click the link to go to 
\begin_inset CommandInset href
LatexCommand href
name "Codecademy"
target "https://www.codecademy.com/learn/learn-the-command-line"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Learn Git
\end_layout

\begin_layout Standard
Click the link to go to 
\begin_inset CommandInset href
LatexCommand href
name "Codecademy"
target "https://www.codecademy.com/learn/learn-git"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
SocketCAN
\end_layout

\begin_layout Standard
According to the official documentation, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

The SocketCAN package is an implementation of CAN protocols (Controller
 Area Network) for Linux.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 Basically, it's a lightweight API that allows us to interact with CAN interface
s on Linux based computers.
 With SocketCAN we can read messages in real-time on a network, send custom
 messages, parse, and even replay messages with relative ease and speed.
 The best part is that the package is free, open-source and is powerful
 enough to use in many non-commercial applications.
 Additional documentation can be found 
\begin_inset CommandInset href
LatexCommand href
name "here?"
target "run:./SCDoc.txt"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Cybersecurity
\end_layout

\begin_layout Subsection
Crytography Foundations
\end_layout

\begin_layout Subsubsection
Terminology
\end_layout

\begin_layout Standard
At it's simplest, cryptography is packing and unpacking a secret message.
 The message you are attempting to send is known as the 
\series bold
plaintext
\series default
, P.
 The transformation of the plaintext into non-readable form is called 
\series bold
encryption
\series default
, E.
 The resulting obscured message is called 
\series bold
ciphertext
\series default
, C.
 The transformation of the cipher text back to the original plaintext is
 called 
\series bold
decryption
\series default
, D.
 This process is illustrated in Fig X.
\end_layout

\begin_layout Subsection
Randomness
\end_layout

\begin_layout Subsection
Hashes
\end_layout

\begin_layout Subsection
Encryption
\end_layout

\begin_layout Subsection
Diffie-Hellman Key Exchange
\end_layout

\begin_layout Subsection
AES Encryption
\end_layout

\begin_layout Subsection
RSA Asymmetric Encryption
\end_layout

\begin_layout Section
Summer Challenges
\end_layout

\begin_layout Subsection
Challenge X: Receive CAN Using Adapter
\end_layout

\begin_layout Subsection
Challenge X: Send and Receive CAN messages using Arduino
\end_layout

\begin_layout Subsection
Challenge X: Plot RPM and Wheel Based Vehicle Speed
\end_layout

\begin_layout Subsection
Challenge X: Hand Decode CAN frame with Oscilloscope
\end_layout

\begin_layout Subsection
Challenge X: Build an Arduino from Scratch
\end_layout

\begin_layout Subsection
Challenge X: 
\end_layout

\begin_layout Subsection
Challenge X:
\end_layout

\begin_layout Subsection
Challenge X:
\end_layout

\begin_layout Subsection
Challenge X:
\end_layout

\begin_layout Section
Welcome to Joe's Garage
\end_layout

\begin_layout Standard
bummer 
\end_layout

\begin_layout Section
Parts and Ordering
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Hardware Design
\end_layout

\begin_layout Subsection
PCBs and Wiring Schematics with Altium Designer
\end_layout

\begin_layout Subsection
3D Modeling and Printing with Solidworks
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{document}
\end_layout

\end_inset

 
\end_layout

\end_body
\end_document
